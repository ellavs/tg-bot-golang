// Code generated by MockGen. DO NOT EDIT.
// Source: internal/clients/cbr/cbrclient.go

// Package mock_cbr is a generated GoMock package.
package mock_cbr

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockhttpClient is a mock of httpClient interface.
type MockhttpClient struct {
	ctrl     *gomock.Controller
	recorder *MockhttpClientMockRecorder
}

// MockhttpClientMockRecorder is the mock recorder for MockhttpClient.
type MockhttpClientMockRecorder struct {
	mock *MockhttpClient
}

// NewMockhttpClient creates a new mock instance.
func NewMockhttpClient(ctrl *gomock.Controller) *MockhttpClient {
	mock := &MockhttpClient{ctrl: ctrl}
	mock.recorder = &MockhttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhttpClient) EXPECT() *MockhttpClientMockRecorder {
	return m.recorder
}

// GetJsonByURL mocks base method.
func (m *MockhttpClient) GetJsonByURL(ctx context.Context, url string, jsonStruct *interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJsonByURL", ctx, url, jsonStruct)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetJsonByURL indicates an expected call of GetJsonByURL.
func (mr *MockhttpClientMockRecorder) GetJsonByURL(ctx, url, jsonStruct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJsonByURL", reflect.TypeOf((*MockhttpClient)(nil).GetJsonByURL), ctx, url, jsonStruct)
}
